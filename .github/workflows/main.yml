name: .NET CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test Application
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Debug Directory Structure
        run: ls -R backend

      # Setup .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x" # Adjust this to your target framework version

      # Restore dependencies
      - name: Restore Dependencies
        # run: dotnet restore backend/backend.sln
        run: dotnet restore backend/Aspire/Aspire.sln

      # Build the application
      - name: Build Application
        # run: dotnet build backend/backend.sln --no-restore --configuration Release
        run: dotnet build backend/Aspire/Aspire.sln --no-restore --configuration Release

      # Run Unit Tests
      # - name: Run Tests
      #   working-directory: backend
      #   run: dotnet test backend.sln --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: Run Tests for All Modules
        # run: dotnet test backend/Api/Module/Experties/Experties.Test
        run: for proj in $(find backend/Api/Module -type f -name "*.csproj" -path "*/.Test/*.csproj"); do echo "Running tests for $proj" dotnet test "$proj" --no-build --configuration Release --logger:"console;verbosity=normal"; done

      
      # Build Docker Image
      # - name: Build Docker Image
      #   run: |
      #     docker build -t mdnafiulhasanhamim/backend-image:latest -f backend/backend.api/Dockerfile backend/backend.api
          
      # # Log in to Docker Hub
      # - name: Push Docker Image
      #   if: github.ref == 'refs/heads/main'
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      
      # # Tag and Push Docker Image to Registry
      # - name: Push Docker Image to Registry
      #   run: |
      #     docker tag mdnafiulhasanhamim/backend-image:latest mdnafiulhasanhamim/backend-image:latest
      #     docker push mdnafiulhasanhamim/backend-image:latest

      
      # Install Docker Compose
      # - name: Install Docker Compose
      #   run: |
      #     sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      #     sudo chmod +x /usr/local/bin/docker-compose

      # # Check if docker-compose.yml exists in the correct path
      # - name: Check if docker-compose.yml exists
      #   run: |
      #     ls -l backend/backend.api/

      # # Build Docker Image using Docker Compose
      # - name: Build Docker Compose Image
      #   run: |
      #     docker-compose -f backend/backend.api/docker-compose.yml build

      # # Log in to Docker Hub
      # - name: Docker Hub Login
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # # Tag Docker Image before pushing
      # - name: Tag Docker Image
      #   run: |
      #     docker tag mdnafiulhasanhamim/backend-image:latest mdnafiulhasanhamim/backend-image:latest

      # # Push Docker Image to Docker Hub
      # - name: Push Docker Image to Registry
      #   run: |
      #     docker-compose -f backend/backend.api/docker-compose.yml push

  publish:
    name: Publish Application
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore Dependencies
        # run: dotnet restore backend/backend.sln
        run: dotnet restore backend/Aspire/Aspire.sln

      - name: Build and Publish
        # run: dotnet publish backend/backend.api/backend.api.csproj -c Release -o backend/backend.api/publish
        run: dotnet publish backend/Api/Server/Server.csproj -c Release -o backend/Api/Server/publish

      - name: Upload Published Application
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          # path: backend/backend.api/publish/
          path: backend/Api/Server/publish/
